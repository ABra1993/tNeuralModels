#%%
# required packages
import numpy as np
import matplotlib.pyplot as plt

# required scripts
from models.Model_Zhou_et_al import  Model_Zhou_et_al
from models.Model_Groen_et_al import  Model_Groen_et_al
from utils.visualization import plot_models


"""
Author: A. Brands

Description: plots a simulation of the Delayed Normalization model.

The following code includes two variations of the DN model:

* Zhou et al.: this model is fitted using 7 parameters

* Groen et al.: this model is fitted using 9 parameters

The implementation of these two models can be found in the folder 'models'.

"""

def main():

    ################### BEFORE RUNNING THE SCRIPT ###################

    # Please specify points 1-3 below.

    # 1. ----------------------
    # Choose model type that is going to be simulated.
    # (That is, either section 'zhou' or 'groen' needs to be commmented out.)

    # ---------------------- Zhou et al.
    type = 'zhou'
    # type = 'groen'

    # 2. ----------------------
    # Define temporal dynamics
    timepts = 800 # defines number of timepoints
    sample_rate = 512

    # 3. ----------------------
    # Define stimulus time course (model input). The time course is generated by
    # initializng a number of timepoints as 0's. Subsequently, a set of timepoints
    # can be chosen (in this case, timepts 300-500) during which the stimulus
    # is present (i.e. 1).
    stim = np.zeros(timepts)
    stim[300:500] = 1 # only change the code HERE

    # Done! You can run the script now.

    ###########################################################################

    # initiate timecourse
    t = np.arange(timepts) * (1/sample_rate)

    # set parameters
    if type == 'zhou':

        # change parameter types HERE
        tau = 0.1
        weight = 0.1
        shift = 0.0
        scale = 1
        n = 2
        sigma = 0.1
        tau_a = 0.1

        # store params
        params = [tau, weight, shift, scale, n, sigma, tau_a]

        # define labels used for plots
        params_label = ['tau: ', 'weight: ', 'shift: ', 'scale: ', 'n: ', 'sigma: ', 'tau_a: ']

        # initiate model
        model = Model_Zhou_et_al(stim, sample_rate, tau, weight, shift, scale, n, sigma, tau_a)

    if type == 'groen':

        tau_pos = 0.03
        tau_neg = 0.003
        n_irf = 2
        weight = 0.25
        shift = 0.2
        scale = 2
        n = 1.5
        sigma = 0.2
        tau_a = 0.11

        # store params
        params = [tau_pos, tau_neg, n_irf, weight, shift, scale, n, sigma, tau_a]

        # define labels used for plots
        params_label = ['tau_pos: ', 'tau_neg: ', 'n_irf: ', 'weight: ', 'shift: ', 'scale: ', 'n: ', 'sigma: ', 'tau_a: ']

        # initiate model
        model = Model_Groen_et_al(stim, sample_rate, tau_pos, tau_neg, n_irf, weight, shift, scale, n, sigma, tau_a)

    # shift stimulus timecourse
    stim_shift = model.response_shift(stim)

    # compute models
    linear = model.lin(stim_shift)
    linear_rectf = model.rectf(linear)
    linear_rectf_exp = model.exp(linear_rectf)
    linear_rectf_exp_norm = model.norm(linear_rectf_exp, linear)
    linear_rectf_exp_norm_delay = model.norm_delay(linear_rectf_exp, linear)
    models = [linear, linear_rectf, linear_rectf_exp, linear_rectf_exp_norm, linear_rectf_exp_norm_delay]

    # scale models
    for i in range(len(models)):
        models[i] = models[i]*scale

    # plot results (i.e. output per model based on stimulus timecourse)
    fig = plot_models(t, stim, type, models, params, params_label)
    plt.savefig('visualizations/model_prediction')
    plt.show()

if __name__ == '__main__':
    main()
